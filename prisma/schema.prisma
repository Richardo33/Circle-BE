
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  username      String    @unique
  full_name     String
  email         String    @unique
  password      String
  photo_profile String?
  bio           String?
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  created_by    String?   @db.Uuid
  updated_at    DateTime? @updatedAt @db.Timestamptz(6)
  updated_by    String?   @db.Uuid

  threads   Thread[]
  replies   Reply[]
  likes     Like[]
  following Following[] @relation("FollowingUser")
  followers Following[] @relation("FollowerUser")
}

model Following {
  id           String   @id @default(uuid()) @db.Uuid
  following_id String   @db.Uuid
  follower_id  String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @updatedAt @db.Timestamptz(6)

  following User @relation("FollowingUser", fields: [following_id], references: [id])
  follower  User @relation("FollowerUser", fields: [follower_id], references: [id])
}

model Thread {
  id                String   @id @default(uuid()) @db.Uuid
  content           String
  image             String?
  number_of_replies Int      @default(0)
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  created_by        String   @db.Uuid
  updated_at        DateTime? @updatedAt @db.Timestamptz(6)
  updated_by        String?   @db.Uuid

  user    User   @relation(fields: [created_by], references: [id])
  replies Reply[]
  likes   Like[]
}

model Reply {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  thread_id  String   @db.Uuid
  image      String?
  content    String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  created_by String   @db.Uuid
  updated_at DateTime? @updatedAt @db.Timestamptz(6)
  updated_by String?   @db.Uuid

  user   User   @relation(fields: [user_id], references: [id])
  thread Thread @relation(fields: [thread_id], references: [id])
}

model Like {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  thread_id  String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  created_by String   @db.Uuid
  updated_at DateTime? @updatedAt @db.Timestamptz(6)
  updated_by String?   @db.Uuid

  user   User   @relation(fields: [user_id], references: [id])
  thread Thread @relation(fields: [thread_id], references: [id])
}
